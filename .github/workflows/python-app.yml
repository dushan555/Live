
name: Build application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      ssh_darwin:
        desc: 'SSH connection to Darwin'
        required: false
        default: 'false'
      release:
        desc: 'Push a new release'
        required: false
        default: 'false'

jobs:
  release:
    needs: [build-win-x86, build-darwin]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
      - name: GetInfo
        run: |
          ls -R
          export VERSION=`cat app/.version`
          echo "VERSION=v$VERSION" >> $GITHUB_ENV
          echo "DIST_DMG=Live-MacOS-v${VERSION}.dmg" >> $GITHUB_ENV
          echo "DIST_EXE=Live-Windows-v${VERSION}.exe" >> $GITHUB_ENV
          echo "DIST_ARM64_DEB=Live-Linux-v${VERSION}-amd64.deb" >> $GITHUB_ENV
          echo $GITHUB_ENV

      - name: Upload
        if: github.event.inputs.release == 'true'
        uses: ncipollo/release-action@v1
        with:
          name: Live ${{ env.VERSION}}
          tag: ${{ env.VERSION}}
          omitBodyDuringUpdate: true
          body: The release is built by github-action.
          token: ${{ secrets.GITHUB_TOKEN}}
          allowUpdates: true
          artifacts: ${{ env.DIST_DMG }}/${{ env.DIST_DMG }},${{ env.DIST_EXE }}/${{ env.DIST_EXE }}
          #,${{ env.DIST_ARM64_DEB }}/${{ env.DIST_ARM64_DEB }}

  build-darwin:
    runs-on: macos-11
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: install create-dmg
        run: brew install create-dmg
        
      - name: install python
        run: |
          wget https://www.python.org/ftp/python/3.9.8/python-3.9.8-macos11.pkg
          sudo installer -pkg python-3.9.8-macos11.pkg -target /

      - name: install requirement
        run: |
          pip3 install -r requirements_darwin.txt
          pip install py2app
          wget https://laboratory.stolendata.net/~djinn/mpv_osx/mpv-latest.tar.gz
          mkdir -p bin && tar --strip-components 2 -C bin -xzvf mpv-latest.tar.gz mpv.app/Contents/MacOS
          
      - name: Build
        id: compile
        run: |
          python3 setup_py2app.py py2app --arch=x86_64
          cp -R bin dist/live.app/Contents/Resources/
          export VERSION=`cat app/.version`
          echo "DIST_DMG=Live-MacOS-v${VERSION}.dmg" >> $GITHUB_ENV
          echo "VERSION=v${VERSION}" >> $GITHUB_ENV
          create-dmg --window-pos 200 200 --window-size 800 500 --icon-size 100 --icon "live.app" 200 200  --hide-extension "live.app" --app-drop-link 560 200  --volname "Live-v${VERSION} Installer" Live-MacOS-v${VERSION}.dmg "dist/"
          echo "::set-output name=status::success"
          
      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: github.event.inputs.ssh_darwin == 'true'
        env:
          TELEGRAM_CHAT_ID: ${{secrets.TELEGRAM_CHAT_ID}}
          TELEGRAM_BOT_TOKEN: ${{secrets.TELEGRAM_BOT_TOKEN}}
          
      - name: Upload dist
        uses: actions/upload-artifact@v2
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{env.DIST_DMG}}
          path: ${{env.DIST_DMG}}

  build-win-x86:
    runs-on: windows-2019
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.7.9'
          architecture: 'x86'

      - name: install requirement
        run: |
          pip3 install -r requirements.txt
          pip install pyinstaller
          $client = new-object System.Net.WebClient
          $client.DownloadFile('https://github.com/dushan555/Live/releases/download/v0.0.1/mpv-0.34.0-i686.7z','mpv.7z')
          7z x -obin mpv.7z *.exe


      - name: Build
        id: compile
        run: |
          pyinstaller --noconfirm -F -w --add-data="app/assets/*;app/assets" --add-binary="bin/mpv.exe;bin" --icon=app/assets/icon.ico live.py
          
          echo "DIST_EXE=Live-Windows-v${VERSION}.exe" >> $GITHUB_ENV
          cp dist\live.exe ${DIST_EXE}
          echo 'build end'
          echo ${{env.DIST_EXE}}
          

      - name: Upload dist
        uses: actions/upload-artifact@v2
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{env.DIST_EXE}}
          path: ${{env.DIST_EXE}}